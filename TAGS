
ctl.c,1288
static const char* SUDO = "sudo -H -u fritz ";SUDO11,154
static const char* XMMS = "/usr/local/bin/xmms";XMMS12,201
    _L, _R,_L17,284
    _L, _R,_R17,284
    _U, _D,_U18,296
    _U, _D,_D18,296
    _C, _T,_C19,308
    _C, _T,_T19,308
    _B, _A,_B20,320
    _B, _A,_A20,320
static char* CMDS[8][3] = {CMDS23,336
static char* CMDS_ALT[8][3] = {CMDS_ALT72,1082
    bool do_uinput;do_uinput110,1558
} g;g111,1578
void go(char** cmds) {go113,1584
void ctl_init(bool do_uinput) {ctl_init121,1732
void ctl(int which, bool alt) {ctl128,1849
void ctl_do_up(bool alt) {ctl_do_up133,1944
void ctl_do_down(bool alt) {ctl_do_down137,2025
void ctl_do_left(bool alt) {ctl_do_left141,2110
void ctl_do_right(bool alt) {ctl_do_right148,2244
void ctl_do_center_x() {ctl_do_center_x155,2379
void ctl_do_center_y() {ctl_do_center_y158,2446
void ctl_do_select_down(bool alt) {ctl_do_select_down161,2513
void ctl_do_select_up() {ctl_do_select_up165,2613
void ctl_do_start_down(bool alt) {ctl_do_start_down167,2641
void ctl_do_start_up() {ctl_do_start_up174,2774
void ctl_do_a_down(bool alt) {ctl_do_a_down176,2801
void ctl_do_a_up(bool alt) {ctl_do_a_up181,2892
void ctl_do_b_down() {ctl_do_b_down183,2923
void ctl_do_b_up() {ctl_do_b_up187,3010

fish-pines.c,1234
#define _GNU_SOURCE_GNU_SOURCE1,0
#define DEBUGDEBUG3,21
#undef TESTING_OFF_PITESTING_OFF_PI5,36
#define DO_UINPUT DO_UINPUT7,59
#define DO_REPEAT_LOCK DO_REPEAT_LOCK9,113
#define	N_RIGHT	N_RIGHT31,403
#define	N_LEFT	N_LEFT32,424
#define	N_DOWN	N_DOWN33,444
#define	N_UP	N_UP34,464
#define	N_START	N_START35,483
#define	N_SELECT	N_SELECT36,504
#define	N_B	N_B37,526
#define	N_A	N_A38,544
static int UPOLL = 200000;UPOLL40,563
static int UPOLL = 40000;UPOLL43,597
    _L, _R,_L49,666
    _L, _R,_R49,666
    _U, _D,_U50,678
    _U, _D,_D50,678
    _C, _T,_C51,690
    _C, _T,_T51,690
    _B, _A,_B52,702
    _B, _A,_A52,702
static short BUTTONS[8];BUTTONS55,718
static bool KILL_MULTIPLE[2][8] = {KILL_MULTIPLE57,744
static void (*FN_DIR_ON[4])(bool) = {FN_DIR_ON84,1121
static void (*FN_DIR_OFF[4])() = {FN_DIR_OFF90,1229
static void (*FN_BTN_ON[8])(bool) = {FN_BTN_ON97,1352
static void (*FN_BTN_OFF[8])() = {FN_BTN_OFF104,1494
static char* STR[] = {STR112,1626
    bool cur[8];cur121,1776
    bool* alt;alt122,1793
} g;g123,1808
int getRand01() {getRand01125,1814
int getRandomButtons() {getRandomButtons130,1905
int main (int argc, char** argv) {main143,2212

mpd.c,761
#define HOST HOST11,126
#define PORT PORT12,151
#define TIMEOUT_MS TIMEOUT_MS13,182
    struct mpd_connection* connection;connection16,216
    bool init;init17,255
} g;g18,270
bool mpd_init() {mpd_init20,276
#define try(try39,796
#define tryr(tryr45,947
bool mpd_toggle_play() {mpd_toggle_play58,1405
bool mpd_seek(int secs) {mpd_seek81,1915
bool mpd_prev() {mpd_prev99,2287
bool mpd_next() {mpd_next106,2421
void mpd_cleanup() {mpd_cleanup114,2583
static struct mpd_status* get_status() {get_status122,2685
static void free_status(struct mpd_status* s) {free_status132,2945
static int get_state() {get_state136,3027
static int get_queue_pos() {get_queue_pos163,3653
static int get_elapsed_time() {get_elapsed_time171,3834

nes.c,456
const int N_UP = NES_UP;N_UP7,83
const int N_DOWN = NES_DOWN;N_DOWN8,108
const int N_LEFT = NES_LEFT;N_LEFT9,137
const int N_RIGHT = NES_RIGHT;N_RIGHT10,166
const int N_SELECT = NES_SELECT;N_SELECT11,197
const int N_START = NES_START;N_START12,230
const int N_A = NES_A;N_A13,261
const int N_B = NES_B;N_B14,284
void nes_init_wiring() {nes_init_wiring16,308
int nes_setup() {nes_setup21,384
int nes_read(int joystick) {nes_read29,552

test.c,363
#define _GNU_SOURCE_GNU_SOURCE1,0
#undef DEBUGDEBUG3,21
int UPOLL = 40000;UPOLL17,212
    L = 1, R,L20,239
    L = 1, R,R20,239
    U, D,U21,253
    U, D,D21,253
    C, R,C22,263
    C, R,R22,263
    B, A,B23,273
    B, A,A23,273
bool KILL_MULTIPLE[8] = {KILL_MULTIPLE26,287
short BUTTONS[8] = {BUTTONS33,384
char* STR[8] = {STR40,485

uinput.c,911
#define _GNU_SOURCE _GNU_SOURCE1,0
static const char* DEV = "/dev/uinput";DEV22,367
static const int USLEEP = 15000;USLEEP23,407
    int uinput;uinput26,457
} g;g27,473
void uinput_init() {uinput_init29,479
void uinput_inject_dir(int axis, int val) {uinput_inject_dir81,1775
void uinput_inject_key(int code, int val) {uinput_inject_key99,2084
void _delay() {_delay115,2357
void uinput_center_x() {uinput_center_x119,2396
void uinput_center_y() {uinput_center_y122,2458
void uinput_left() {uinput_left126,2521
void uinput_right() {uinput_right129,2578
void uinput_up() {uinput_up132,2637
void uinput_down() {uinput_down135,2692
void uinput_btn_select() {uinput_btn_select138,2750
void uinput_btn_start() {uinput_btn_start143,2859
void uinput_btn_b_down() {uinput_btn_b_down148,2967
void uinput_btn_b_up() {uinput_btn_b_up151,3029
void uinput_btn_a() {uinput_btn_a154,3089

config.h,0

ctl.h,0

mpd.h,90
#define HOST HOST11,129
#define PORT PORT12,154
#define TIMEOUT_MS TIMEOUT_MS13,185

nes.h,340
const int N_UP;N_UP5,70
const int N_DOWN;N_DOWN6,86
const int N_LEFT;N_LEFT7,104
const int N_RIGHT;N_RIGHT8,122
const int N_SELECT;N_SELECT9,141
const int N_START;N_START10,161
const int N_A;N_A11,180
const int N_B;N_B12,195
static int DPIN = 6;DPIN15,225
static int CPIN = 5;CPIN17,256
static int LPIN = 4;LPIN19,290

uinput.h,0
